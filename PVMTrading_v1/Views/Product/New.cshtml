
@model PVMTrading_v1.ViewModels.ProductViewModel


@using (Html.BeginForm("Save", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">New Product</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    </div>
    <div class="modal-body">
        <div class="form-horizontal">
          
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">
                <div class="column">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.Name, new { @class = "control-label col-md-12" ,id="productName"})
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" ,id= "Status"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(c => c.Product.ProductImage, new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.TextBoxFor(model => model.Product.ProductImage, new { id="file", type = "file" , accept = "image/x-png,image/gif,image/jpeg" })
                            @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Product.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.SerialNumber, "Serial Number ", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Product.SerialNumber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.SerialNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.Model, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Product.Model, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.Model, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.OriginalPrice, "Original Price", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Product.OriginalPrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.OriginalPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.BrandId, "Brand Name", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.DropDownListFor(m => m.Product.BrandId, new SelectList(Model.Brands, "Id", "BrandName"), "Brand Name", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Product.BrandId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.BranchId, "Branch Name", htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.DropDownListFor(m => m.Product.BranchId, new SelectList(Model.Branches, "Id", "BranchName"), "Branch Name", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Product.BranchId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.ProductCategoryId, "Category", new { @class = "control-label col-md-12" })
                        <div class="col-md-12">
                            @Html.DropDownListFor(m => m.Product.ProductCategoryId, new SelectList(Model.ProductCategories, "Id", "Name"), "Product Category", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Product.ProductCategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <div class="column">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.ProductConditionId, "Product Condition", htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Product.ProductConditionId, new SelectList(Model.ProductConditions, "Id", "Label"), "Product Condition", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Product.ProductConditionId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductInclusion.FreeItem, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductInclusion.FreeItem, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductInclusion.FreeItem, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductInclusion.Quantity,"Quantity Of Free Item", htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductInclusion.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductInclusion.Quantity, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductPrice.SellingPrice, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductPrice.SellingPrice, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductPrice.SellingPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductPrice.Remarks, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ProductPrice.Remarks, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ProductPrice.Remarks, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.WarrantyId, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Product.WarrantyId, new SelectList(Model.Warranties, "Id", "Label"), "Select Warranty", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Product.WarrantyId, "", new { @class = "text-danger" })
                        </div>
                    </div>


                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.AvailableForSelling, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Product.AvailableForSelling, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.AvailableForSelling, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.Reserved, htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Product.Reserved, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Product.Reserved, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Product.IsReturned, "Returned", htmlAttributes: new { @class = "control-label col-md-10" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.Product.IsReturned)
                                @Html.ValidationMessageFor(model => model.Product.IsReturned, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                   
                </div>
            </div>
            <div class="modal-footer">
                @Html.HiddenFor(m => m.Product.Id)
                <div class="form-group">
                    <button type="submit" value="Create" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" value="Save" class="btn btn-primary">Save changes</button>
                   
                
                </div>
              
               
            </div>
            
           
              
        </div>

        <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
        <script src="~/Scripts/jquery.validate.js"></script>
        <script>
    
            function ProductCheck() {
                $("#Status").html("Checking.....");
                $.post("@Url.Action("IsBarCodeUnique", "Product")", 
                    {
                        userdata:
                            $("#productName").val()
                    },
                    function(data) {
                        if (data == 0) {
                            $("#Status").html('<font color = "green"> Product does not yet exist</font>');
                            $("#productName").css("border-color", "Green");
                        } else {
                            $("#Status").html('<font color = "red"> Product already exist</font>');
                            $("#productName").css("border-color", "red");
                        }
                    });
            }

          


        </script>

    </div>
}
  
         
